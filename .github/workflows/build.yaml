name: Build & Test Add-on

on:
  workflow_dispatch:
    inputs:
      addon:
        type: choice
        description: Add-on
        options:
          - cloudflared
          - collabora_code
          - ezbookkeeping
          - gitea
          - gitlab
          - grimoire
          - grist
          - grocy
          - immich
          - immich_frame
          - immich_power_tools
          - jellyfin
          - karakeep
          - mealie
          - memos
          - monica
          - n8n
          - nextcloud
          - openspeedtest
          - paperless
          - pocketbase
          - postgres_16
          - redis
          - syncthing

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: üë∑ Build ${{ github.event.inputs.addon }} ${{ matrix.arch }}
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.arch) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        arch: [aarch64, amd64, armhf, armv7, i386]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: ‚§µÔ∏è Check out repository
        uses: actions/checkout@v5

      - name: üöÄ Get add-on information
        id: info
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "./${{ github.event.inputs.addon }}"

      - name: üîç Check add-on arch & test
        id: check
        run: |
          if [[ "${{ steps.info.outputs.image }}" == "null" ]]; then
            echo "Image property is not defined, skipping build"
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          elif [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
            echo "build_arch=true" >> $GITHUB_OUTPUT;
          else
            echo "${{ matrix.arch }} is not a valid arch for ${{ github.event.inputs.addon }}, skipping build";
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

          if [ -d "${{ steps.info.outputs.target }}/test" ]; then
            echo "test=true" >> $GITHUB_OUTPUT
          else
            echo "test=false" >> $GITHUB_OUTPUT
          fi

      - name: üèó Set up QEMU
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/setup-qemu-action@v3.6.0

      - name: üèó Set up Docker Buildx
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/setup-buildx-action@v3.11.1

      - name: ‚ÑπÔ∏è Compose build flags
        if: steps.check.outputs.build_arch == 'true'
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.arch }}" "${{ steps.info.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.arch}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.arch }}"
            exit 1
          fi

          # Set tag suffix based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag_suffix=latest" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "tag_suffix=dev" >> "$GITHUB_OUTPUT"
          else
            echo "tag_suffix=test" >> "$GITHUB_OUTPUT"
          fi

      - name: üöÄ Build
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/build-push-action@v6.18.0
        with:
          load: true
          # yamllint disable rule:line-length
          tags: |
            ${{ steps.info.outputs.image }}:${{ steps.flags.outputs.tag_suffix }}-${{ matrix.arch }}
            ${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}-${{ matrix.arch }}
          # yamllint enable rule:line-length
          context: ${{ steps.info.outputs.target }}
          file: ${{ steps.info.outputs.target }}/Dockerfile
          cache-from: type=gha,scope=${{ github.event.inputs.addon }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ github.event.inputs.addon }}-${{ matrix.arch }}
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.arch }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ steps.info.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ steps.info.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ steps.info.outputs.version }}

      - name: üèó Set up Docker Compose
        if: steps.check.outputs.build_arch == 'true' && steps.check.outputs.test == 'true'
        uses: docker/setup-compose-action@v1
      
      - name: Start Docker Compose services
        if: steps.check.outputs.build_arch == 'true' && steps.check.outputs.test == 'true'
        run: |
          cd "${{ steps.info.outputs.target }}/test"
          docker compose up -d
      
      - name: ü©∫ Healthcheck
        uses: jaracogmbh/docker-compose-health-check-action@v1.0.0
        if: steps.check.outputs.build_arch == 'true' && steps.check.outputs.test == 'true'
        with:
          max-retries: 30
          retry-interval: 10
          compose-file: "${{ github.event.inputs.addon }}/test/docker-compose.yml"
      
      - name: Stop Docker Compose services
        if: steps.check.outputs.build_arch == 'true' && steps.check.outputs.test == 'true'
        run: |
          cd "${{ steps.info.outputs.target }}/test"
          docker compose down
