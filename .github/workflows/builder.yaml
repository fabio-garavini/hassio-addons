---
name: Builder

env:
  MONITORED_FILES: apparmor.txt build.yaml config.yaml Dockerfile rootfs

on:
  workflow_call:
  pull_request:
    branches:
      - main
      - dev
    paths:
      - '**/config.yaml'
      - '**/build.yaml'
      - '**/Dockerfile'
      - '**/apparmor.txt'
      - '**/rootfs/**'
  push:
    branches:
      - main
      - dev
    paths:
      - '**/config.yaml'
      - '**/build.yaml'
      - '**/Dockerfile'
      - '**/apparmor.txt'
      - '**/rootfs/**'

defaults:
  run:
    shell: bash

jobs:
  init:
    runs-on: ubuntu-latest
    name: ℹ️ Gather add-ons information
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: ⤵️ Check out the repository
        uses: actions/checkout@v5

      - name: 📄 Get changed files
        id: changed_files
        uses: masesgroup/retrieve-changed-files@v3

      - name: 🔍 Find add-ons
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: ✏️ Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file && -f "$addon/Dockerfile" ]]; then
                  if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                    changed_addons+=("\"${addon}\",");
                  fi
                fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi

  deploy:
    name: 👷 Build ${{ matrix.addon }} ${{ matrix.arch }}
    runs-on:  ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.arch) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: init
    if: needs.init.outputs.changed == 'true'
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: [aarch64, amd64, armhf, armv7, i386]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: ⤵️ Check out repository
        uses: actions/checkout@v4

      - name: 🚀 Get add-on information
        id: info
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "./${{ matrix.addon }}"

      - name: 🔍 Check add-on arch
        id: check
        run: |
          if [[ "${{ steps.info.outputs.image }}" == "null" ]]; then
            echo "Image property is not defined, skipping build"
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          elif [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
            echo "build_arch=true" >> $GITHUB_OUTPUT;
          else
            echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

      - name: 🏗 Set up build cache
        if: steps.check.outputs.build_arch == 'true'
        id: cache
        uses: actions/cache@v4.2.4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.addon }}-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.addon }}-${{ matrix.arch }}

      - name: 🏗 Set up QEMU
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/setup-qemu-action@v3.6.0

      - name: 🏗 Set up Docker Buildx
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/setup-buildx-action@v3.11.1

      - name: ℹ️ Compose build flags
        if: steps.check.outputs.build_arch == 'true'
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.arch }}" "${{ steps.info.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.arch}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.arch }}"
            exit 1
          fi

      - name: 🔑 Login to DockerHub
        if: steps.check.outputs.build_arch == 'true' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ⤵️ Download base image
        if: steps.check.outputs.build_arch == 'true' && steps.flags.outputs.from != 'null'
        run: docker pull "${{ steps.flags.outputs.from }}"

      - name: 🚀 Build
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/build-push-action@v6.18.0
        with:
          load: true
          # yamllint disable rule:line-length
          tags: |
            ${{ steps.info.outputs.image }}:latest
            ${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}
          # yamllint enable rule:line-length
          context: ${{ steps.info.outputs.target }}
          file: ${{ steps.info.outputs.target }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.arch }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ steps.info.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ steps.info.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ steps.info.outputs.version }}

      - name: 🚚 Swap build cache
        if: steps.check.outputs.build_arch == 'true'
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache

      - name: 🚀 Push
        if: steps.check.outputs.build_arch == 'true' && github.ref == 'refs/heads/main'
        # yamllint disable rule:line-length
        run: |
          docker push \
            ${{ steps.info.outputs.image }}:latest-${{ matrix.arch }}
          docker push \
            ${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}-${{ matrix.arch }}

  manifest:
    name: 🚀 Deploy ${{ matrix.addon }} Multi Arch Manifest
    if: github.ref == 'refs/heads/main'
    needs:
      - init
      - deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v5

      - name: 🚀 Run add-on information action
        id: info
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "./${{ matrix.addon }}"

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: 🚀 Create manifest
        shell: bash
        # yamllint disable rule:line-length
        run: |
          declare -a images

          for architecture in $(echo '${{ steps.info.outputs.architectures }}' | jq --raw-output '.[]'); do
            images+=("${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}-${architecture}")
          done

          docker manifest create \
             "${{ steps.info.outputs.image }}:latest" \
             "${images[@]}"

          docker manifest create \
             "${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}" \
             "${images[@]}"

      - name: 🏗  Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Push
        # yamllint disable rule:line-length
        run: |
          docker manifest push \
            "${{ steps.info.outputs.image }}:latest"
          docker manifest push \
            "${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}"
