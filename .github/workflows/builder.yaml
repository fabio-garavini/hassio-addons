name: Builder

env:
  MONITORED_FILES: apparmor.txt build.yaml config.yaml Dockerfile rootfs

on:
  pull_request:
    branches:
      - main
      - dev
    paths:
      - "**/config.yaml"
      - "**/build.yaml"
      - "**/Dockerfile"
      - "**/apparmor.txt"
      - "**/rootfs/**"
  push:
    branches:
      - main
      - dev
    paths:
      - "**/config.yaml"
      - "**/build.yaml"
      - "**/Dockerfile"
      - "**/apparmor.txt"
      - "**/rootfs/**"

defaults:
  run:
    shell: bash

jobs:
  init:
    runs-on: ubuntu-latest
    name: ℹ️ Gather add-ons information
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: ⤵️ Check out the repository
        uses: actions/checkout@v5

      - name: 📄 Get changed files
        id: changed_files
        uses: masesgroup/retrieve-changed-files@v3

      - name: 🔍 Find add-ons
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: ✏️ Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file && -f "$addon/Dockerfile" ]]; then
                  if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                    changed_addons+=("\"${addon}\",");
                  fi
                fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi

  deploy:
    name: 👷 Build ${{ matrix.addon }} ${{ matrix.arch }}
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.arch) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: init
    if: needs.init.outputs.changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: [aarch64, amd64, armhf, armv7, i386]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: ⤵️ Check out repository
        uses: actions/checkout@v5

      - name: 🚀 Get add-on information
        id: info
        uses: frenck/action-addon-information@v1
        with:
          path: "./${{ matrix.addon }}"

      - name: 🔍 Check add-on arch
        id: check
        run: |
          if [[ "${{ steps.info.outputs.image }}" == "null" ]]; then
            echo "Image property is not defined, skipping build"
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          elif [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
            echo "build_arch=true" >> $GITHUB_OUTPUT;
          else
            echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

      - name: 🔍 Get add-on version
        if: steps.check.outputs.build_arch == 'true'
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version_name=latest" >> "$GITHUB_OUTPUT"
            echo "VERSION=latest" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "version_name=dev" >> "$GITHUB_OUTPUT"
            echo "VERSION=dev" >> $GITHUB_ENV
          else
            echo "version_name=test" >> "$GITHUB_OUTPUT"
            echo "VERSION=test" >> $GITHUB_ENV
          fi

      - name: 🔍 Get add-on tests
        if: steps.check.outputs.build_arch == 'true'
        id: tests
        run: |
          if [ -d "${{ steps.info.outputs.target }}/test" ]; then
            echo "test=true" >> $GITHUB_OUTPUT
          else
            echo "test=false" >> $GITHUB_OUTPUT
          fi

      - name: 📌 Load common build files
        if: steps.check.outputs.build_arch == 'true'
        run: |
          cp -r .common ${{ steps.info.outputs.target }}/.common

      - name: 🔑 Login to DockerHub
        if: steps.check.outputs.build_arch == 'true' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗 Set up QEMU
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/setup-qemu-action@v3

      - name: 🏗 Set up Docker Compose
        if: steps.check.outputs.build_arch == 'true' && steps.tests.outputs.test == 'true'
        uses: docker/setup-compose-action@v1

      - name: 🏗 Set up Docker Buildx
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/setup-buildx-action@v3

      - name: ℹ️ Compose build args
        if: steps.check.outputs.build_arch == 'true'
        id: args
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.arch }}" "${{ steps.info.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.arch}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.arch }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.arch }}"
            exit 1
          fi

      - name: 🚀 Build
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/build-push-action@v6
        with:
          load: true
          # yamllint disable rule:line-length
          tags: |
            ${{ steps.info.outputs.image }}:${{ steps.version.outputs.version_name }}-${{ matrix.arch }}
            ${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}-${{ matrix.arch }}
          # yamllint enable rule:line-length
          context: ${{ steps.info.outputs.target }}
          file: ${{ steps.info.outputs.target }}/Dockerfile
          cache-from: type=gha,scope=${{ matrix.addon }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.addon }}-${{ matrix.arch }}
          platforms: ${{ steps.args.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.arch }}
            BUILD_DATE=${{ steps.args.outputs.date }}
            BUILD_DESCRIPTION=${{ steps.info.outputs.description }}
            BUILD_FROM=${{ steps.args.outputs.from }}
            BUILD_NAME=${{ steps.info.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ steps.info.outputs.version }}

      - name: ⚙️ Start Docker Compose services
        if: steps.check.outputs.build_arch == 'true' && steps.tests.outputs.test == 'true'
        run: |
          cd "${{ steps.info.outputs.target }}/test"
          docker compose -f "docker-compose.${{ matrix.arch }}.yml" up -d

      - name: 🩺 Healthcheck
        uses: jaracogmbh/docker-compose-health-check-action@v1.0.0
        if: steps.check.outputs.build_arch == 'true' && steps.tests.outputs.test == 'true'
        with:
          max-retries: 30
          retry-interval: 10
          compose-file: "${{ steps.info.outputs.target }}/test/docker-compose.${{ matrix.arch }}.yml"

      - name: ¿? Restart Docker Compose services
        if: steps.check.outputs.build_arch == 'true' && steps.tests.outputs.test == 'true'
        run: |
          cd "${{ steps.info.outputs.target }}/test"
          docker compose -f "docker-compose.${{ matrix.arch }}.yml" restart

      - name: 🩺 Healthcheck
        uses: jaracogmbh/docker-compose-health-check-action@v1.0.0
        if: steps.check.outputs.build_arch == 'true' && steps.tests.outputs.test == 'true'
        with:
          max-retries: 30
          retry-interval: 10
          compose-file: "${{ steps.info.outputs.target }}/test/docker-compose.${{ matrix.arch }}.yml"

      - name: 🏁 Stop Docker Compose services
        if: steps.check.outputs.build_arch == 'true' && steps.tests.outputs.test == 'true'
        run: |
          cd "${{ steps.info.outputs.target }}/test"
          docker compose -f "docker-compose.${{ matrix.arch }}.yml" down -v

      - name: 🚀 Push
        if: steps.check.outputs.build_arch == 'true' && github.event_name == 'push'
        # yamllint disable rule:line-length
        run: |
          docker push ${{ steps.info.outputs.image }}:${{ steps.version.outputs.version_name }}-${{ matrix.arch }}
          docker push ${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}-${{ matrix.arch }}

      - name: ✅ Write success artifact
        if: steps.check.outputs.build_arch == 'true' && success()
        run: |
          mkdir -p deploy-status
          # Sanitize addon name for filename (replace / with -)
          addon_name="${{ matrix.addon }}"
          echo "success" > "deploy-status/${addon_name}-${{ matrix.arch }}.txt"
          echo "Build and deployment successful for ${{ matrix.addon }} on ${{ matrix.arch }}"

      - name: 📤 Upload success artifact
        if: steps.check.outputs.build_arch == 'true' && success()
        uses: actions/upload-artifact@v5
        with:
          name: deploy-status-${{ matrix.addon }}-${{ matrix.arch }}
          path: deploy-status/
          retention-days: 1

  manifest:
    name: 🚀 Deploy ${{ matrix.addon }} Multi Arch Manifest
    if: always() && github.event_name == 'push'
    needs:
      - init
      - deploy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v5

      - name: 🚀 Run add-on information action
        id: info
        uses: frenck/action-addon-information@v1
        with:
          path: "./${{ matrix.addon }}"

      - name: ℹ️ Get version name tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version_name=latest" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "version_name=dev" >> "$GITHUB_OUTPUT"
          else
            echo "version_name=test" >> "$GITHUB_OUTPUT"
          fi

      - name: 📥 Download all deploy artifacts
        uses: actions/download-artifact@v6
        with:
          pattern: deploy-status-${{ matrix.addon }}-*
          path: deploy-status/
          merge-multiple: true

      - name: ✅ Verify all architectures succeeded
        id: verify
        run: |
          echo "Checking deployment status for ${{ matrix.addon }}"
          addon_name="${{ matrix.addon }}"
          
          all_success=true
          for architecture in $(echo '${{ steps.info.outputs.architectures }}' | jq -r '.[]'); do
            status_file="deploy-status/${addon_name}-${architecture}.txt"
            
            if [[ -f "$status_file" ]]; then
              status=$(cat "$status_file")
              if [[ "$status" == "success" ]]; then
                echo "✅ ${architecture}: SUCCESS"
              else
                echo "❌ ${architecture}: FAILED (unexpected status: $status)"
                all_success=false
              fi
            else
              echo "❌ ${architecture}: FAILED (status file not found)"
              all_success=false
            fi
          done
          
          if [[ "$all_success" == "true" ]]; then
            echo "all_success=true" >> $GITHUB_OUTPUT
            echo "✅ All architectures built successfully!"
          else
            echo "all_success=false" >> $GITHUB_OUTPUT
            echo "❌ Some architectures failed. Aborting manifest creation."
            exit 1
          fi

      - name: 🏗 Set up Docker Buildx
        if: steps.verify.outputs.all_success == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to DockerHub
        if: steps.verify.outputs.all_success == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🚀 Create & Push multi-arch image
        if: steps.verify.outputs.all_success == 'true'
        run: |
          declare -a images
          for architecture in $(echo '${{ steps.info.outputs.architectures }}' | jq -r '.[]'); do
            images+=("${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}-${architecture}")
          done

          docker manifest create \
            "${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}" \
            "${images[@]}"
          docker manifest push \
            "${{ steps.info.outputs.image }}:${{ steps.info.outputs.version }}"

          docker manifest create \
            "${{ steps.info.outputs.image }}:${{ steps.version.outputs.version_name }}" \
            "${images[@]}"
          docker manifest push \
            "${{ steps.info.outputs.image }}:${{ steps.version.outputs.version_name }}"
