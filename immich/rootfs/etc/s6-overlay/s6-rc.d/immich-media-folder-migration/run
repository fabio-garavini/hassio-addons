#!/usr/bin/with-contenv bashio
# shellcheck shell=bash

set -e

# Exclude common system folders
EXCLUDES=(
    "lost+found"
    ".Trash*"
    ".zfs"
    ".cache"
    ".DS_Store"
    "System Volume Information"
    "\$RECYCLE.BIN"
)

# Build --exclude options
exclude_rsync=()
exclude_find=()
for item in "${EXCLUDES[@]}"; do
    exclude_rsync+=("--exclude=$item")
    exclude_find+=(-o -name "$item")
done

exclude_find=("${exclude_find[@]:1}")

# Function to check available disk space
check_disk_space() {
  local source_dir="$1"
  local dest_dir="$2"

  # Get source directory size in KB
  local source_size=$(du -sk "$source_dir" | cut -f1)

  # Get available space in destination in KB
  local dest_available=$(df -k "$dest_dir" | tail -1 | awk '{print $4}')

  # Add 10% buffer for safety
  local required_space=$((source_size + source_size / 10))

  bashio::log.info "Source size: $(numfmt --to=iec-i --suffix=B $((source_size * 1024)))"
  bashio::log.info "Available space: $(numfmt --to=iec-i --suffix=B $((dest_available * 1024)))"
  bashio::log.info "Required space (with buffer): $(numfmt --to=iec-i --suffix=B $((required_space * 1024)))"

  if [ "$required_space" -gt "$dest_available" ]; then
    bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.error "Insufficient disk space for migration!"
    bashio::log.error "Required: $(numfmt --to=iec-i --suffix=B $((required_space * 1024)))"
    bashio::log.error "Available: $(numfmt --to=iec-i --suffix=B $((dest_available * 1024)))"
    bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
    return 1
  fi

  return 0
}

# Function to perform safe rsync migration
perform_migration() {
  local source_dir="$1"
  local dest_dir="$2"

  bashio::log.info "Starting migration from $source_dir to $dest_dir"

  # First, do a dry run to check for potential issues
  if ! rsync -ah --dry-run --remove-source-files --partial --partial-dir=.rsync-partial "${exclude_rsync[@]}" "$source_dir/" "$dest_dir/" > /dev/null; then
    bashio::log.error "Migration test failed. Aborting migration."
    return 1
  fi

  # Perform actual migration with progress and error handling
  if rsync -ah --progress --remove-source-files --partial --partial-dir=.rsync-partial "${exclude_rsync[@]}" "$source_dir/" "$dest_dir/"; then
    bashio::log.info "File migration completed successfully"

    # Clean up empty directories from source
    bashio::log.info "Cleaning up empty directories..."
    find "$source_dir/" -type d -empty -delete 2>/dev/null || true

    # Verify migration by comparing file counts and total size
    local source_files=$(find "$source_dir" -type f ! \( "${exclude_expr[@]}" -o -path "$dest_dir/*" \) 2>/dev/null | wc -l)
    local dest_files=$(find "$dest_dir" -type f ! \( "${exclude_expr[@]}" -o -path "$source_dir/*" \) 2>/dev/null | wc -l)

    if [ "$source_files" -eq 0 ]; then
      bashio::log.info "Migration verification successful - no files left in source"
      return 0
    else
      bashio::log.warning "Migration may be incomplete - $source_files files remain in source"
      return 1
    fi
  else
    bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.error "Migration failed!"
    bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.error "The migration has been aborted. Your original files remain in $source_dir"
    bashio::log.error "Please check disk space, permissions, and try again."
    bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
    return 1
  fi
}

RESOLVED_PATH=$(realpath -m "$IMMICH_MEDIA_LOCATION" 2>/dev/null)

# Check if the path resolution failed
if [[ -z "$RESOLVED_PATH" ]]; then
  bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
  bashio::log.error "[$IMMICH_MEDIA_LOCATION] is not a valid path. Please remove any special character or spaces"
  bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
  bashio::log.error "Read the DOCUMENTATION page for more information on how to migrate the Immich Media folder"
  bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
  bashio::addon.stop
fi

# If the resolved path differs, update the environment
if [[ "$IMMICH_MEDIA_LOCATION" != "$RESOLVED_PATH" ]]; then
  echo "$RESOLVED_PATH" > /var/run/s6/container_environment/IMMICH_MEDIA_LOCATION
  IMMICH_MEDIA_LOCATION="$RESOLVED_PATH"
  export IMMICH_MEDIA_LOCATION
fi

valid_paths=("/media/" "/share/" "/config/library")

# Check if the IMMICH_MEDIA_LOCATION starts with a valid path
valid=false
for path in "${valid_paths[@]}"; do
  if [[ "$path" == */ ]]; then
    # Match only subdirectories (not equal)
    if [[ "$IMMICH_MEDIA_LOCATION" == "$path"* ]] && [[ "$IMMICH_MEDIA_LOCATION" != "$path" ]]; then
      valid=true
      break
    fi
  else
    # Exact match only
    if [[ "$IMMICH_MEDIA_LOCATION" == "$path" ]]; then
      valid=true
      break
    fi
  fi
done

while read -r _ mountpoint _; do
  [[ "$mountpoint" != /mnt/* ]] && continue

  if [[ "$IMMICH_MEDIA_LOCATION" == "$mountpoint" ]] || [[ "$IMMICH_MEDIA_LOCATION" == "$mountpoint/"* ]]; then
    valid=true
    break
  fi
done < /proc/mounts

if ! $valid; then
  bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
  bashio::log.error "[$IMMICH_MEDIA_LOCATION] is not a valid media folder path! It must be under one of these paths [${valid_paths[*]}]"
  bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
  bashio::log.error "Read the DOCUMENTATION page for more information on how to migrate the Immich Media folder"
  bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
  bashio::addon.stop
fi

CONFIG_FILE="/config/immich.json"

if [ ! -f "$CONFIG_FILE" ]; then
  echo '{}' > "$CONFIG_FILE"
fi

current_media_dir=$(jq -r ".media_location // empty" "${CONFIG_FILE}")

if [ -z "$current_media_dir" ]; then
  jq --arg path "$IMMICH_MEDIA_LOCATION" '.media_location = $path' "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
  exit 0
fi

if [[ "$current_media_dir" == "$IMMICH_MEDIA_LOCATION" ]]; then
  # No migration needed
  bashio::log.debug "Skipping media library migration"
  exit 0
fi

bashio::log.info "Start Immich Media Library migration..."

if [ -d "$current_media_dir/.rsync-partial" ]; then
  bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
  bashio::log.error "Current media dir $current_media_dir is corrupted! Contains partial transfers of a interrupted previous migration"
  bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
  bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
fi

# Check if current_media_dir exists and is a Immich library
if [ -d "$current_media_dir" ] && [ -f "$current_media_dir/library/.immich" ]; then
  if [ ! -d "$IMMICH_MEDIA_LOCATION" ] || [ -z "$(find "$IMMICH_MEDIA_LOCATION" -mindepth 1 -maxdepth 1 ! \( "${exclude_expr[@]}" -o -path "$current_media_dir/*" \) 2>/dev/null)" ] || [ -d "$IMMICH_MEDIA_LOCATION/.rsync-partial" ]; then

    # Ensure destination directory exists for disk check
    [[ ! -d "$IMMICH_MEDIA_LOCATION" ]] && mkdir -p "$IMMICH_MEDIA_LOCATION"

    # Check disk space before attempting migration
    if ! check_disk_space "$current_media_dir" "$IMMICH_MEDIA_LOCATION"; then
      bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
      bashio::addon.stop
    fi

    # Attempt migration
    if perform_migration "$current_media_dir" "$IMMICH_MEDIA_LOCATION"; then
      bashio::log.info "Migration completed successfully"
    else
      bashio::log.error "Migration failed"
      bashio::addon.stop
    fi

  else
    bashio::log.warning "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.warning "Destination ($IMMICH_MEDIA_LOCATION) contain files. Checking content before migration."
    bashio::log.warning "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.warning "Comparing source $current_media_dir with destination $IMMICH_MEDIA_LOCATION :"

    diff=$(rsync -avc --dry-run --delete "${exclude_rsync[@]}" "$DIR1/" "$DIR2/")

    if [[ -n "$diff" ]]; then
      echo "$diff"

      bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
      bashio::log.error "Destination ($IMMICH_MEDIA_LOCATION) contain files. Aborting migration."
      bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
      bashio::log.error "This is expected if you manually copied the Immich Media folder to the new location"
      bashio::log.error "If you want to keep a copy of the media folder make a backup of $current_media_dir and delete $IMMICH_MEDIA_LOCATION to procede"
      bashio::log.error "If you want to keep a copy of the media folder make a backup of $current_media_dir and delete $IMMICH_MEDIA_LOCATION to procede"
      bashio::log.error "Read the DOCUMENTATION page for more information on how to migrate the Immich Media folder"
      bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
      bashio::addon.stop
    else
      bashio::log.info "Folders are identical, skipping file migration"
    fi
  fi
else
  if [ ! -d "$IMMICH_MEDIA_LOCATION" ] || [ ! -f "$IMMICH_MEDIA_LOCATION/library/.immich" ]; then
    bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.error "Unable to find a media library in source ($current_media_dir) and destination ($IMMICH_MEDIA_LOCATION). Unknown media location"
    bashio::log.error "-----------------------------------------------------------------------------------------------------------------------"
    bashio::log.error "This is expected if you manually moved the Immich Media folder somewhere else"
    bashio::log.error "Make shure that 'Media Library' config point to your folder"
    bashio::log.error "Read the DOCUMENTATION page for more information on how to migrate the Immich Media folder"
    bashio::log.error "Ask for help: https://github.com/fabio-garavini/hassio-addons/issues"
    bashio::addon.stop
  else
    bashio::log.warning "Detected existing Media library in $IMMICH_MEDIA_LOCATION"
    bashio::log.warning "Skipping file migration"
  fi
fi

# Only update config if we reach this point (migration was successful or skipped)
jq --arg path "$IMMICH_MEDIA_LOCATION" '.media_location = $path' "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"

bashio::log.info "Media Location migration complete"